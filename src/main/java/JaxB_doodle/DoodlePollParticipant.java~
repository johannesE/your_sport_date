package activedoodle;

import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Logger;

/**
 * 	Instances of this class represent a participant of a poll.	
 * 
 * 	IMPORTANT: If you only save the parent doodle poll, changes on the participants won't be
 * 	transferred to the doodle REST API. You need to call participant.save() yourself.
 * 
 *	@author Christian Bäuerlein christian.baeuerlein@gmail.com
 */
public class DoodlePollParticipant {

	/**
	 * 	Logger for debugging
	 */
	private static final Logger logger = Logger.getLogger(DoodlePollParticipant.class.getName());
	
	/**
	 * 	Name of the participant. 
	 * 	Under this name the participant attends to the poll.
	 */
	public String name;
	
	/**
	 * 	The id of the participant (generated by doodle REST API)
	 */
	private String id;
	
	/**
	 * 	The poll associated with the participant
	 */
	private DoodlePoll poll;
	
	/**
	 * 	The preferences of this participant
	 */
	public ArrayList<DoodlePollPreference> preferences;
	
	/**
	 * 	Indicates, if this participant has been saved to the
	 * 	doodle REST API yet.
	 */
	private boolean isNewParticipant = false;
	
	/**
	 * 	Indicates, if changes have been made to the data of
	 * 	this object, that need to be saved to the doodle REST API
	 */
	private boolean hasChanges = false;
	
	/**
	 * 	Creates a new participant for the passed poll, with
	 * 	a given name.	
	 * 
	 * 	@param poll	
	 * 		The poll the participant belongs to.
	 * 	@param name
	 * 		Name of the participant.
	 */
	public DoodlePollParticipant(DoodlePoll poll, String name){
		
		this.poll = poll;	
		this.name = name;	
		isNewParticipant = true;
		
		preferences = new ArrayList<DoodlePollPreference>();	
	}
	
	/**
	 * 	Declares an existing participant for the passed poll, with
	 * 	a given name and id.	
	 * 
	 * 	@param poll	
	 * 		The poll the participant belongs to.
	 * 	@param name
	 * 		Name of the participant.
	 * 	@param id
	 * 		The participant's id
	 */
	public DoodlePollParticipant(DoodlePoll poll, String name, String id){
		
		this.poll = poll;	
		this.name = name;
		this.id = id;
		
		preferences = new ArrayList<DoodlePollPreference>();		
	}
	
	/**
	 * 	Get the participant's preference of the passed option.
	 * 
	 * 	@param option
	 * 		The option to get the preference for.
	 * 	
	 * 	@return
	 * 		The preference of the participant, null if not found
	 */
	public DoodlePollPreference getPreference (DoodlePollOption option) {
		
		for(int i = 0; i < preferences.size(); i++) {
			
			if(preferences.get(i).option.equals(option)) {
				return preferences.get(i);
			}			
		}
		
		return null;
	}
	
	/**
	 * 	Returns, if the participant has been
	 * 	newly created.
	 * 
	 * 	@return
	 * 		True, if participant was newly created, false, if not.
	 */
	public boolean isNew(){
		return isNewParticipant;
	}
	
	/**
	 * 	The object gets touched, to indicate that
	 * 	changes have been made, that need to be saved
	 * 	to the doodle REST API.	
	 */
	public void touch(){
		hasChanges = true;
	}
	
	/**
	 * 	Creates a xml representation of the object
	 * 	to be sent to the doodle REST API
	 * 
	 * 	@return
	 * 		The xml version of this object
	 */
	public String createParticipantXml() {
		StringBuffer participantXml = new StringBuffer();

		participantXml.append("<participant xmlns=\"http://doodle.com/xsd1\">");		
		participantXml.append("<name>" + name + "</name>");
		// add the preferences	
		participantXml.append("<preferences>");
		for(int i = 0; i < preferences.size(); i++) {				
			participantXml.append("<option>" + preferences.get(i).getVote() + "</option>");				
		}		
		participantXml.append("</preferences>");
		participantXml.append("</participant>");
		
		return participantXml.toString();
	}
	
	/**
	 * 	Saves the participant to the doodle REST API.
	 *	Depending on if this is a new created participant or not,
	 * 	the data is either send as a POST (save new) or a PUT (save existing)
	 * 	request.
	 * 	Existing objects are only sent to the doodle API if they have been changed (touched).
	 * 
	 * 	@return
	 * 		True, if the request was successful, false, if not.
	 */
	public boolean save() {
		
		HttpURLConnection http;
		OutputStream body;
		String xmlParticipantString = createParticipantXml();
		
		if(isNewParticipant) {
			//post
			try {

				http = (HttpURLConnection)(new URL( DoodlePoll.BASE_URL + DoodlePoll.pollsURL + "/" + poll.getId() + DoodlePoll.participantsURL )).openConnection();
				
	            http.setDoOutput( true );

	            http.setRequestProperty( "Content-Type", "text/xml" );

	            http.setRequestMethod( "POST" );

	            poll.getConsumer().sign( http );

	            body = http.getOutputStream();

	            body.write( xmlParticipantString.getBytes() );

	            body.close();
	            String participantId = http.getHeaderField( "Content-Location" );
	            
	            logger.info( "Participant ID is " + participantId );

	            int lastResponseCode = http.getResponseCode();

	            logger.info("New participant was created: " + participantId + " response: " + lastResponseCode);
	            
	            if(lastResponseCode == HttpURLConnection.HTTP_CREATED) {

	            	return true;
	            } else {
	            	return false;
	            }
				
			} catch(Exception e) {
				e.printStackTrace();
				return false;
			}
			
		} else if (!isNewParticipant && hasChanges) {
			//put
			try {
	
				http = (HttpURLConnection)(new URL( DoodlePoll.BASE_URL + DoodlePoll.pollsURL + "/" + poll.getId() + DoodlePoll.participantsURL + "/" + id )).openConnection();
				
				http.setInstanceFollowRedirects(false);
	            
				http.setDoOutput( true );
	            http.setRequestProperty( "Content-Type", "text/xml" );
	            http.setRequestMethod( "PUT" );
	            http.setRequestProperty( "X-DoodleKey", poll.getXKey() );
	            poll.getConsumer().sign( http );
	            body = http.getOutputStream();
	            body.write( xmlParticipantString.getBytes() );
	            body.close();
	            int lastResponseCode = http.getResponseCode();

	            if(lastResponseCode == HttpURLConnection.HTTP_OK) {
	            	
	            	logger.info("Participant was saved: " + name);
	            	
		            return true;
	            	
	            } else {
	            	return false;
	            }

			} catch(Exception e) {
				e.printStackTrace();
				return false;
			}
		} else {
			return false;
		}
	}	
}
